import sValue from './helpers/some.js';

export default class Bar {
    constructor(attrs) {
        this.a = attrs.a;
        this.b = attrs.b || sValue;
    }
    get c() {
        return this.a + this.b;
    }
    onClick() {
        this.a += 1;
        this.b += '.';
        console.log('clicked');
    }


    // after this line, all code is generated by the build process
    // this is a generated method based on the template
    render({
        isDirty,
        createElement,
        updateAttributeInMarkup,
        updateContentInMarkup,
        mountElementAsChild,
        componentWasRehydrated,
    }) {
        const rehydrate = () => {
            if (isDirty(this, 'a')) {
                updateAttributeInMarkup(this, 'button1', 'name', this.a);
                mountElementAsChild(this, 'button1', 1, renderIf1());
            }
            if (isDirty(this, 'b')) {
                updateContentInMarkup(this, 'span1', 0, this.b);
            }
            return componentWasRehydrated(this);
        };
        const renderIf1 = () => {
            if (this.a) {
                return createElement('span', {
                    __ref: 'span2',
                }, ['something']);
            } else {
                return null;
            }
        };
        const render = () => {
            return createElement('button', {
                __ref: 'button1',
                name: this.a,
                onClick: (e) => this.onClick(e)
            }, [
                createElement('span', {
                    __ref: 'span1',
                }, [this.b]),
                renderIf1(),
            ]);
        };
        return isDirty(this) ? rehydrate() : render();
    }
}
